Here I will describe my thought process and plan of attack as it relates to the tasks at hand.

WHAT needs to get done?

###First: I need to use Axios to (GET) a list of 'Smurf'(s) that exist on the server 
        (To retreive an array all the smurfs in the Smurf DB simply write a get to the endpoint `'/smurfs'`)

//I dont have Axios here yet do I? Let's go ahead and fix that. [X]


###Second: then make a (POST) with Axios to add said 'Smurf' to the Smurf DB.
        (* To add a smurf to the Smurf DB you'll need all three fields.
            * Example:

            ```js
            {
            name: 'Sleepy',
            age: 323,
            height: '5cm'
            }
            ```

        * If a smurf is created correctly, you should see a response that is an array of smurfs with unique id's assigned to each smurf.)

###Third: I need to Implement a router into the application with React-Router.
        (* Once you've finished your `GET` and `POST` requests go ahead and implement a Router for your components within this application.  
            * You'll start by wrapping your `root` component in the `Router` component.
            * Then declare your routes with `Route`.
            * Then make it so you can navigate to your routes using `Link`.
        * Create a home `/` route that mounts a Header component describing to a user that they are welcomed guests in the smurf village. 
            * This header component should have a button/link that can take a user to a new page.
        * Create a link that navigates a user into the village. This route `/smurfs` should mount the `App` component that will fetch your 
            data, and display your Smurfs as well as your Smurf Form.)

############################################################################################################################################

###Stretch!
Fourth: I need to Implement a (PUT)
Copied from the README.md are the following steps and requirements for the Stretch problems.

### HTTP/Axios Stretch Problems
* The following two endpoints are here for you if you'd like to push yourselves a little further.

* **HINT** if you are going to be working on Stretch Problem, you'll need to use that unique `id`.

### DELETE '/smurfs/123', where 123 is the Id of the smurf you want to remove

* For this endpoint to work, all you need is an id sent up as part of the request url.

* If your delete worked, you'll get a list of the smurfs back.
* Example:

```js
// output: `A list of all the smurfs in the Smurf DB will be returned`
[
    {
        "name": "Brainy",
        "age": 211,
        "height": "5cm",
        "id": 0
    },
    {
        "name": "Smurfette",
        "age": 122,
        "height": "12cm",
        "id": 1
    }
]
```

### PUT '/smurfs/123', where 123 is the Id of the smurf you want to modify
* For this endpoint to work, you'll need an `id` added to the URL, and at least one field to update on the Smurf object. `name` `age` `height`.
* Example:

```js
// input:
{
  id: 1,
  name: Sleepy
}
// output: `A list of all the smurfs in the Smurf DB will be returned`
[{
  name: 'Sleepy',
  age: 30,
  height: '3cm,
  id: 1
}]
```

### Router Stretch Problem
* If a user clicks on a smurf, they should be routed to `/smurf/:id` and a single smurf should be displayed on the page.
* I know this seems like a small task, but you'll have to get crafty with your data and your logic here. 